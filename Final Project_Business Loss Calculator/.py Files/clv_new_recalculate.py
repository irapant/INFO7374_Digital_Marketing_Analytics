# -*- coding: utf-8 -*-
"""CLV_new_recalculate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gqJFiwucFMOlSdQ5P283Jl-Ir-r-IK1h
"""

db_name = "info7374dbassignment2"#-------------------------------------Redshift: Database Name for gaming data

master_username = ""#----------------------------------------Redshift: Admin Username
master_password = ""#---------------------------------Redshift: Admin Password


hostname = "info7374clusterproject.cwtvmzfhaqaf.us-east-1.redshift.amazonaws.com" #----------------Redshift: Hostname for database
port_number = 5439    #----------------Redshift: Port Number for databse

!pip install pandas_redshift

#import modulesi
import pandas_redshift as pr
import pandas as pd # for dataframes
import matplotlib.pyplot as plt # for plotting graphs
import seaborn as sns # for plotting graphs
import datetime as dt
import numpy as np

pr.connect_to_redshift(dbname = db_name ,
                        host = hostname,
                        port = port_number,
                        user = master_username,
                        password =master_password)

data = pr.redshift_to_pandas('select * from sales')

data=data.drop_duplicates()

data.head()

data.shape

data.info()

data.isnull().sum()

data= data[pd.notnull(data['customerid'])]

"""**Where most of the customers are from?**"""

#filtered_data=data[['states','customerid']].drop_duplicates()
#filtered_data.states.value_counts()[:10].plot(kind='bar')
#plt.show()
#plt.savefig('./Image1.png')

"""**Where most of the customers are from?**

**Where most of the customers are from?**
"""

data = data[(data['quantity']>0)]

#most bought product
data['description'].value_counts()[:10]

#which customer bought the most number of items?
cust_data=pd.DataFrame()
cust_data['customerid']=list(set(data['customerid']))
cust_data=cust_data.set_index('customerid')
for cust_id in cust_data.index:
    cust_data.at[cust_id,'Number_of_items']=(len(data[data['customerid']==cust_id]['description']))
cust_data=cust_data.sort_values('Number_of_items',ascending=False)

#cust_data.head(5).plot(kind='bar')
#plt.ylabel('Number of Items')
#plt.title('Top 5 customers')
#plt.show()
#plt.savefig('./Image2.png')

data.head(5)

"""# **Customer Lifetime Value**"""

#	stockcode	description					states
data=data[['customerid','invoicedate','invoiceno','quantity','unitprice']]
#Calulate total purchase
data['TotalPurchase'] = data['quantity'] * data['unitprice']

"""Here, we are going to perform the following operations:

    Calculate the number of days between the present date and the date of last purchase from each customer.
    Calculate the number of orders for each customer.
    Calculate sum of purchase price for each customer.
"""

data_group=data.groupby('customerid').agg({'invoicedate': lambda date: (date.max() - date.min()).days,
                                                 'invoiceno': lambda num: len(num),
                                                 'quantity': lambda quant: quant.sum(),
                                                 'TotalPurchase': lambda price: price.sum()})

data_group.head()

#plt.hist(data_group['invoiceno'],bins=[1,2,3,4,5,10,15,25,50],density=True,color='r')
#plt.xlabel('Number of Invoices per Customer ID')
#plt.ylabel('Density')
#plt.title('Number of Invoices per Customer Distrbution')
#plt.show()
#plt.savefig('./Image3.png')
#print('*'*63)

# Change the name of columns
data_group.columns=['num_days','num_transactions','num_units','spent_money']
data_group.head()

# Average Order Value
data_group['avg_order_value']=data_group['spent_money']/data_group['num_transactions']

purchase_frequency=sum(data_group['num_transactions'])/data_group.shape[0]

# Repeat Rate
repeat_rate=data_group[data_group.num_transactions > 1].shape[0]/data_group.shape[0]
#Churn Rate
churn_rate=1-repeat_rate

data_group.head()

purchase_frequency,repeat_rate,churn_rate

data_group.dtypes

# Profit Margin
data_group['profit_margin']=data_group['spent_money'].astype('float') *0.05

"""CLTV = ((Average Order Value x Purchase Frequency) / Churn Rate) x Profit margin.

Customer Value = Average Order Value * Purchase Frequency
"""

# Customer Value
data_group['CLV']=(data_group['avg_order_value'].astype('float')*purchase_frequency)/churn_rate
#Customer Lifetime Value
data_group['cust_lifetime_value']=data_group['CLV'].astype('float')*data_group['profit_margin'].astype('float')
data_group.head()

data_group.loc[:,"cust_lifetime_value"].mean()

